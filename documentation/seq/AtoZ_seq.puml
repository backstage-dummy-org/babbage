@startuml
hide footbox
title AtoZ API
!include defMethod.def
autonumber

actor ONSWebsiteUser



ONSWebsiteUser -> AtoZ: list a-z
activate AtoZ
    method(AtoZ,AtoZ,getFirstLetter(HttpRequest request),letter)
    method(AtoZ,SearchRequestHelper, extractSearchTerm(HttpRequest request),searchTerm)
    method(AtoZ, SearchUtils, buildBaseListQuery, queryBuilder)
    method(AtoZ, AtoZ, lastFilter, searchFilter)
    methodNewReturn(AtoZ, ONSQueryBuilders, "onsQuery(QueryBuilder queryBuilder, SearchFilter searchFilter)",onsQuery,ONSQuery)
    method(AtoZ,ONSQuery,  onsQuery.types(ContentType.bulletin), types)
    method(AtoZ,ONSQueryBuilders,firstLetterCounts(types),countsByFirstLetter)


    AtoZ -> SearchHelper : search(countsByFirstLetter);
    activate SearchHelper

        methodNewReturn(SearchHelper, SearchHelper, prepare(ONSQuery countsByFirstLetter) , searchRequestBuilder, SearchRequestBuilder)


        database ElasticSearch

        SearchHelper -> SearchRequestBuilder : get()
            activate SearchRequestBuilder
            SearchRequestBuilder -> ElasticSearch : //_search//
            SearchHelper <-- SearchRequestBuilder : Response
            deactivate SearchRequestBuilder

        create ONSSearchResponse
        SearchHelper -> ONSSearchResponse : //new(response)//

        SearchHelper -> SearchHelper : resolveDetails(ONSQuery queryBuilder,\n ONSSearchResponse response)
            activate SearchHelper
            func(SearchHelper, SearchHelper, "resolvePaginator(ONSQuery queryBuilder,\n ONSSearchResponse response)")
            func(SearchHelper, SearchHelper, "resolveSortBy(ONSQuery queryBuilder,\n ONSSearchResponse response)")
            deactivate SearchHelper
    AtoZ <-- SearchHelper : countResults
    deactivate SearchHelper

    create "Results \n <Map>"
    AtoZ -> "Results \n <Map>" : new


    deactivate SearchHelper

    AtoZ -> "Results \n <Map>" : count()
    AtoZ <-- "Results \n <Map>" : count()


    alt isNotEmpty(firstLetter) && (count == null)
        AtoZ -> AtoZ : list(request, **//null//**);
        activate AtoZ
         ref over AtoZ : "Common AtoZ.list()" section
        AtoZ <-- AtoZ : results
        deactivate AtoZ
    else
        AtoZ -> AtoZ : list(request, firstLetter);
        activate AtoZ
        group Common "AtoZ.list()" section
            methodNewReturn(AtoZ,AtoZ, "queries(HttpServletRequest request, String firstLetter)",searchQueries, SearchQueries)
            AtoZ -> SearchUtils : searchAll
                        activate SearchUtils
                        method(SearchUtils, SearchQueries, buildQueries(), queries)
                        method(SearchUtils, SearchQueries, doSearch(), results)
                        SearchUtils -> SearchHelper : searchMultiple()
                            activate SearchHelper
                            create MultiSearchRequestBuilder
                            SearchHelper -> MultiSearchRequestBuilder : //new//
                            SearchHelper -> MultiSearchRequestBuilder : get
                                activate MultiSearchRequestBuilder
                                func(MultiSearchRequestBuilder, ElasticSearch, //_search//)
                                SearchHelper <-- MultiSearchRequestBuilder : Response
                                deactivate MultiSearchRequestBuilder
                            SearchUtils <-- SearchHelper :  responseList
                            deactivate SearchHelper
                        AtoZ <-- SearchUtils : Map results
                        deactivate SearchUtils
        end
        AtoZ <-- AtoZ : results
        deactivate AtoZ
        |||
    end

    AtoZ -> SearchUtils : buildResponse()
    activate SearchUtils
    note right : ""buildResponse(HttpServletRequest request,""\n\t\t\t\t""String listType,""\n\t\t\t\t""Map<String, SearchResult> results)""
    AtoZ <-- SearchUtils
    deactivate SearchUtils
    ONSWebsiteUser <-- AtoZ
    deactivate AtoZ
@enduml