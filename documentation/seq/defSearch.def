@startuml
!definelong search(Caller,SearchQueries)
!include defMethod.def
Caller -> SearchUtils : ""search()""
activate SearchUtils

alt  searchTerm is null
    SearchUtils -> SearchUtils : build buildResponse(request, listType, null)
    note left of SearchUtils : If the client has not submitted a search term
    activate SearchUtils
    SearchUtils <-- SearchUtils : httpResponse
    Caller <-- SearchUtils : httpResponse
deactivate SearchUtils
else !filtered && had matching TimeSeries
    SearchUtils -> SearchUtils :  searchTimeSeriesUri(searchTerm);

    create BabbageDirectResponse
    SearchUtils -> BabbageDirectResponse : new
    Caller <-- SearchUtils : return BabbageDirectResponse

end
    SearchUtils -> SearchUtils : searchAll(SearchQueries searchQueries)
        activate SearchUtils
        methodNewReturn(SearchUtils, SearchQueries, builderQueries(), List<ONSQuery>, ONSQueries)
        SearchUtils -> SearchUtils : doSearch
            activate SearchUtils
            SearchUtils -> SearchHelper : searchMultiple(List<ONSQuery> queries)
                activate SearchHelper
                    methodNewReturn(SearchHelper, ElasticSearchClient, prepareMultiSearch(), multiSearchRequestBuilder, MultiSearchRequestBuilder)
                    ... add prepare and build multiSearchRequestBuilder from List<ONSQuery> ...
                     database ElasticSearch
                     SearchHelper -> MultiSearchRequestBuilder : get()
                        activate MultiSearchRequestBuilder
                        MultiSearchRequestBuilder -> ElasticSearch : //_search//
                        SearchHelper <-- MultiSearchRequestBuilder : Response
                        deactivate MultiSearchRequestBuilder
                 SearchUtils <-- SearchHelper : List<ONSSearchResponse>
                deactivate SearchHelper
            SearchUtils <-- SearchUtils : LinkedHashMap<String, SearchResult>
            deactivate SearchUtils
        SearchUtils <-- SearchUtils : results
        deactivate SearchUtils
alt searchDepartments?
    SearchUtils -> SearchUtils : ""searchDepartments(results)""
    note left: results supplied\n and method populates directly
    activate SearchUtils
    deactivate SearchUtils
end

SearchUtils -> SearchUtils : build buildResponse(request, listType, null)
note left of SearchUtils : Build response actually invokes the search\n and builds the response
activate SearchUtils
SearchUtils <-- SearchUtils : httpResponse
Caller <-- SearchUtils : httpResponse
deactivate SearchUtils
deactivate SearchUtils
!enddefinelong

@enduml